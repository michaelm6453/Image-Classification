# -*- coding: utf-8 -*-
"""Embedded_Lab_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NIp35b_0PzzZRt-nbffU_GApmmidHsAQ
"""

# Import required libraries
import torch
import torch.nn.functional as F
from torchvision import models, transforms
from PIL import Image
import requests
import matplotlib.pyplot as plt
from io import BytesIO
import time

# Load and display image
url = "https://raw.githubusercontent.com/pytorch/hub/master/images/dog.jpg"
response = requests.get(url)
img = Image.open(BytesIO(response.content))

plt.imshow(img)
plt.title("Original Image")
plt.axis("off")
plt.show()

# Preprocess the image
preprocess = transforms.Compose([
    transforms.Resize(256),                        # Resize shortest side to 256
    transforms.CenterCrop(224),                    # Crop to 224x224
    transforms.ToTensor(),                         # Convert to tensor
    transforms.Normalize(                          # Normalize using ImageNet stats
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]
    )
])

img_tensor = preprocess(img).unsqueeze(0)  # Add batch dimension
print("Tensor shape:", img_tensor.shape)
print("Tensor type:", type(img_tensor))

# Load pretrained ResNet18
model = models.resnet18(pretrained=True)
model.eval()  # Evaluation mode

# CPU Inference
start = time.time()
with torch.no_grad():
    output_cpu = model(img_tensor)
end = time.time()
print("CPU inference time:", end - start, "seconds")

# GPU Inference
if torch.cuda.is_available():
    device = torch.device("cuda")
    model_gpu = model.to(device)
    img_tensor_gpu = img_tensor.to(device)

    start = time.time()
    with torch.no_grad():
        output_gpu = model_gpu(img_tensor_gpu)
    end = time.time()
    print("GPU inference time:", end - start, "seconds")
else:
    print("CUDA GPU not available in this runtime.")
    output_gpu = output_cpu  # fallback

# Get Top-5 Predictions Section
# Use CPU output for consistency
probabilities = F.softmax(output_cpu[0], dim=0)

# Load ImageNet labels
labels_url = "https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt"
labels = requests.get(labels_url).text.strip().split("\n")

# Get top-5 predictions
top5 = torch.topk(probabilities, 5)

print("\nTop-5 Predictions:")
for idx in top5.indices:
    print(f"{labels[idx]}: {probabilities[idx].item():.4f}")